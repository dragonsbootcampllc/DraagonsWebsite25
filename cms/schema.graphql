# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  password: String
}

type Blog {
  id: ID!
  type: String
  slug: String
  title: String
  content: Blog_content_Document
  image: ImageFieldOutput
  company: Company
  challenge: String
  solution: String
  results: JSON
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  status: String
}

type Blog_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input BlogWhereUniqueInput {
  id: ID
  slug: String
}

input BlogWhereInput {
  AND: [BlogWhereInput!]
  OR: [BlogWhereInput!]
  NOT: [BlogWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  slug: StringFilter
  title: StringFilter
  company: CompanyWhereInput
  challenge: StringFilter
  solution: StringFilter
  tags: TagManyRelationFilter
  status: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input BlogOrderByInput {
  id: OrderDirection
  type: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  challenge: OrderDirection
  solution: OrderDirection
  status: OrderDirection
}

input BlogUpdateInput {
  type: String
  slug: String
  title: String
  content: JSON
  image: ImageFieldInput
  company: CompanyRelateToOneForUpdateInput
  challenge: String
  solution: String
  results: JSON
  tags: TagRelateToManyForUpdateInput
  status: String
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input BlogUpdateArgs {
  where: BlogWhereUniqueInput!
  data: BlogUpdateInput!
}

input BlogCreateInput {
  type: String
  slug: String
  title: String
  content: JSON
  image: ImageFieldInput
  company: CompanyRelateToOneForCreateInput
  challenge: String
  solution: String
  results: JSON
  tags: TagRelateToManyForCreateInput
  status: String
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type FAQ {
  id: ID!
  category: Category
  question: String
  answer: FAQ_answer_Document
}

type FAQ_answer_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FAQWhereUniqueInput {
  id: ID
}

input FAQWhereInput {
  AND: [FAQWhereInput!]
  OR: [FAQWhereInput!]
  NOT: [FAQWhereInput!]
  id: IDFilter
  category: CategoryWhereInput
  question: StringFilter
}

input FAQOrderByInput {
  id: OrderDirection
  question: OrderDirection
}

input FAQUpdateInput {
  category: CategoryRelateToOneForUpdateInput
  question: String
  answer: JSON
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input FAQUpdateArgs {
  where: FAQWhereUniqueInput!
  data: FAQUpdateInput!
}

input FAQCreateInput {
  category: CategoryRelateToOneForCreateInput
  question: String
  answer: JSON
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Company {
  id: ID!
  name: String
  size: String
  website: String
  address: String
  fund: String
  features: JSON
  industries(where: IndustryWhereInput! = {}, orderBy: [IndustryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IndustryWhereUniqueInput): [Industry!]
  industriesCount(where: IndustryWhereInput! = {}): Int
  blogs(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogsCount(where: BlogWhereInput! = {}): Int
  typeOfCollaboration: String
  duration: String
  status: String
  type: String
}

input CompanyWhereUniqueInput {
  id: ID
  name: String
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  size: StringFilter
  website: StringFilter
  address: StringFilter
  fund: StringFilter
  industries: IndustryManyRelationFilter
  blogs: BlogManyRelationFilter
  typeOfCollaboration: StringFilter
  duration: StringFilter
  status: StringFilter
  type: StringFilter
}

input IndustryManyRelationFilter {
  every: IndustryWhereInput
  some: IndustryWhereInput
  none: IndustryWhereInput
}

input BlogManyRelationFilter {
  every: BlogWhereInput
  some: BlogWhereInput
  none: BlogWhereInput
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  size: OrderDirection
  website: OrderDirection
  address: OrderDirection
  fund: OrderDirection
  typeOfCollaboration: OrderDirection
  duration: OrderDirection
  status: OrderDirection
  type: OrderDirection
}

input CompanyUpdateInput {
  name: String
  size: String
  website: String
  address: String
  fund: String
  features: JSON
  industries: IndustryRelateToManyForUpdateInput
  blogs: BlogRelateToManyForUpdateInput
  typeOfCollaboration: String
  duration: String
  status: String
  type: String
}

input IndustryRelateToManyForUpdateInput {
  disconnect: [IndustryWhereUniqueInput!]
  set: [IndustryWhereUniqueInput!]
  create: [IndustryCreateInput!]
  connect: [IndustryWhereUniqueInput!]
}

input BlogRelateToManyForUpdateInput {
  disconnect: [BlogWhereUniqueInput!]
  set: [BlogWhereUniqueInput!]
  create: [BlogCreateInput!]
  connect: [BlogWhereUniqueInput!]
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
  size: String
  website: String
  address: String
  fund: String
  features: JSON
  industries: IndustryRelateToManyForCreateInput
  blogs: BlogRelateToManyForCreateInput
  typeOfCollaboration: String
  duration: String
  status: String
  type: String
}

input IndustryRelateToManyForCreateInput {
  create: [IndustryCreateInput!]
  connect: [IndustryWhereUniqueInput!]
}

input BlogRelateToManyForCreateInput {
  create: [BlogCreateInput!]
  connect: [BlogWhereUniqueInput!]
}

type Industry {
  id: ID!
  name: String
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  companiesCount(where: CompanyWhereInput! = {}): Int
}

input IndustryWhereUniqueInput {
  id: ID
  name: String
}

input IndustryWhereInput {
  AND: [IndustryWhereInput!]
  OR: [IndustryWhereInput!]
  NOT: [IndustryWhereInput!]
  id: IDFilter
  name: StringFilter
  companies: CompanyManyRelationFilter
}

input CompanyManyRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input IndustryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input IndustryUpdateInput {
  name: String
  companies: CompanyRelateToManyForUpdateInput
}

input CompanyRelateToManyForUpdateInput {
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

input IndustryUpdateArgs {
  where: IndustryWhereUniqueInput!
  data: IndustryUpdateInput!
}

input IndustryCreateInput {
  name: String
  companies: CompanyRelateToManyForCreateInput
}

input CompanyRelateToManyForCreateInput {
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

type Category {
  id: ID!
  name: String
  faqs(where: FAQWhereInput! = {}, orderBy: [FAQOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQWhereUniqueInput): [FAQ!]
  faqsCount(where: FAQWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  faqs: FAQManyRelationFilter
}

input FAQManyRelationFilter {
  every: FAQWhereInput
  some: FAQWhereInput
  none: FAQWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  faqs: FAQRelateToManyForUpdateInput
}

input FAQRelateToManyForUpdateInput {
  disconnect: [FAQWhereUniqueInput!]
  set: [FAQWhereUniqueInput!]
  create: [FAQCreateInput!]
  connect: [FAQWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  faqs: FAQRelateToManyForCreateInput
}

input FAQRelateToManyForCreateInput {
  create: [FAQCreateInput!]
  connect: [FAQWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  blogs(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogsCount(where: BlogWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  blogs: BlogManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  blogs: BlogRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  blogs: BlogRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBlog(data: BlogCreateInput!): Blog
  createBlogs(data: [BlogCreateInput!]!): [Blog]
  updateBlog(where: BlogWhereUniqueInput!, data: BlogUpdateInput!): Blog
  updateBlogs(data: [BlogUpdateArgs!]!): [Blog]
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteBlogs(where: [BlogWhereUniqueInput!]!): [Blog]
  createFAQ(data: FAQCreateInput!): FAQ
  createFAQS(data: [FAQCreateInput!]!): [FAQ]
  updateFAQ(where: FAQWhereUniqueInput!, data: FAQUpdateInput!): FAQ
  updateFAQS(data: [FAQUpdateArgs!]!): [FAQ]
  deleteFAQ(where: FAQWhereUniqueInput!): FAQ
  deleteFAQS(where: [FAQWhereUniqueInput!]!): [FAQ]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createIndustry(data: IndustryCreateInput!): Industry
  createIndustries(data: [IndustryCreateInput!]!): [Industry]
  updateIndustry(where: IndustryWhereUniqueInput!, data: IndustryUpdateInput!): Industry
  updateIndustries(data: [IndustryUpdateArgs!]!): [Industry]
  deleteIndustry(where: IndustryWhereUniqueInput!): Industry
  deleteIndustries(where: [IndustryWhereUniqueInput!]!): [Industry]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  blog(where: BlogWhereUniqueInput!): Blog
  blogs(where: BlogWhereInput! = {}, orderBy: [BlogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlogWhereUniqueInput): [Blog!]
  blogsCount(where: BlogWhereInput! = {}): Int
  fAQ(where: FAQWhereUniqueInput!): FAQ
  fAQS(where: FAQWhereInput! = {}, orderBy: [FAQOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQWhereUniqueInput): [FAQ!]
  fAQSCount(where: FAQWhereInput! = {}): Int
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  companiesCount(where: CompanyWhereInput! = {}): Int
  industry(where: IndustryWhereUniqueInput!): Industry
  industries(where: IndustryWhereInput! = {}, orderBy: [IndustryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IndustryWhereUniqueInput): [Industry!]
  industriesCount(where: IndustryWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
